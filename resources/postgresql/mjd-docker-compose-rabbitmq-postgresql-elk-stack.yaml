version: '3'
services:

  # https://www.elastic.co/guide/en/elasticsearch/reference/7.14/docker.html
  elasticsearch:
    container_name: senzing-elasticsearch
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:12201
        tag: "senzing-elasticsearch"
    environment:
      - discovery.type=single-node
    image: elasticsearch:7.14.2
    networks:
      - ELK
    ports:
      - 9200:9200
      - 9300:9300
    volumes:
      - ./elasticsearch_data/:/etc/elasticsearch
    restart: always

#  redis-cache:
#    container_name: senzing-redis-cache
#    image: redis:6.2
#    logging:
#      driver: gelf
#      options:
#        gelf-address: udp://localhost:12201
#        tag: "senzing-redis-cache"
#    networks:
#      - ELK
#    restart: always

  # https://www.elastic.co/guide/en/logstash/7.14/docker.html
  logstash:
    container_name: senzing-logstash
    depends_on:
      - elasticsearch
      - kibana
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:12201
        tag: "senzing-logstash"
    environment:
      - STDOUT=true
      - "xpack.monitoring.elasticsearch.url=http://senzing-elasticsearch:9200"
    image: logstash:7.16.2
    networks:
      - ELK
    ports:
      - 5044:5044
      - 12201:12201/udp
#    volumes:
#    - ./logstash:/etc/logstash
 #   - ${LOGSTASH_DIR:-.}:/usr/share/logstash/pipeline/
    command: logstash -e "input { udp { port => 12201 } } output { elasticsearch { hosts => ["senzing-elasticsearch:9200"] } stdout { codec => rubydebug } }"
    restart: always

  logspout:
    image: gliderlabs/logspout:v3.2.14
    command: 'udp://senzing-logstash:12201'
    volumes:
      - '/var/run/docker.sock:/tmp/docker.sock'
    networks:
      - ELK
    depends_on:
       - elasticsearch
       - logstash
       - kibana

#  logstash-central:
#    container_name: senzing-logstash-central
#    depends_on:
#      - elasticsearch
#    image: logstash:7.11.1
#    logging:
#      driver: gelf
#      options:
#        gelf-address: udp://localhost:12201
#        tag: "senzing-logstash-central"
#    networks:
#        - ELK
#    volumes:
#      - ./logstash-central:/etc/logstash
#    command: logstash -f /etc/logstash/logstash2.conf
#    restart: always

  # https://www.elastic.co/guide/en/kibana/7.14/docker.html
  kibana:
    container_name: senzing-kibana
    depends_on:
      - elasticsearch
    environment:
      ELASTICSEARCH_HOSTS: http://senzing-elasticsearch:9200
    image: kibana:7.14.2
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:12201
        tag: "senzing-kibana"
    networks:
      - ELK
    ports:
      - 5601:5601
    restart: always
 #   volumes:
 #     - ${KIBANA_DIR:-.}:/usr/share/kibana

  rabbitmq:
    container_name: senzing-rabbitmq
    depends_on:
      - kibana
    environment:
#     See https://github.com/bitnami/bitnami-docker-rabbitmq#configuration
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-bitnami}
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME:-user}
    image: bitnami/rabbitmq:${SENZING_DOCKER_IMAGE_VERSION_BITNAMI_RABBITMQ:-3.8.19-debian-10-r6}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-rabbitmq"
    networks:
      - backend
    ports:
      - 15672:15672
      - 5672:5672
    restart: always
    volumes:
      - ${RABBITMQ_DIR}:/bitnami

  producer:
    container_name: senzing-stream-producer
    depends_on:
      - rabbitmq
      - kibana
    environment:
#     See https://github.com/Senzing/stream-producer#configuration
      SENZING_DELAY_IN_SECONDS: 30
      SENZING_INPUT_URL: "https://s3.amazonaws.com/public-read-access/TestDataSets/loadtest-dataset-1M.json"
      SENZING_RABBITMQ_HOST: senzing-rabbitmq
      SENZING_RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-bitnami}
      SENZING_RABBITMQ_QUEUE: senzing-rabbitmq-queue
      SENZING_RABBITMQ_USERNAME: ${RABBITMQ_USERNAME:-user}
      SENZING_RECORD_MAX: ${SENZING_RECORD_MAX:-5000}
      SENZING_RECORD_MONITOR: 1000
      SENZING_SUBCOMMAND: json-to-rabbitmq
    image: senzing/stream-producer:${SENZING_DOCKER_IMAGE_VERSION_STREAM_PRODUCER:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-stream-producer"
    networks:
      - backend
    restart: on-failure

  postgres:
    container_name: senzing-postgres
    depends_on:
      - kibana
    environment:
#     See https://github.com/docker-library/docs/blob/master/postgres/README.md#environment-variables
      POSTGRES_DB: ${POSTGRES_DB:-G2}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME:-postgres}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USERNAME:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    image: bitnami/postgresql:${SENZING_DOCKER_IMAGE_VERSION_BITNAMI_POSTGRESQL:-11.12.0-debian-10-r50}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-postgres"
    networks:
      - backend
    ports:
      - 5432:5432
    restart: always
    volumes:
      - ${POSTGRES_DIR:-/var/lib/postgresql/data}:/var/lib/postgresql/data

  postgresinit:
    container_name: senzing-postgresql-init
    depends_on:
      - postgres
      - kibana
    environment:
      SENZING_DATABASE_URL: "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-senzing-postgres}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-G2}"
      SENZING_SQL_FILE: /opt/senzing/g2/resources/schema/g2core-schema-postgresql-create.sql
    image: senzing/postgresql-client:${SENZING_DOCKER_IMAGE_VERSION_POSTGRESQL_CLIENT:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-postgresql-init"
    networks:
      - backend
    restart: on-failure
    volumes:
      - ${SENZING_G2_DIR:-/opt/senzing/g2}:/opt/senzing/g2

  phppgadmin:
    container_name: senzing-phppgadmin
    depends_on:
      - kibana
    environment:
#     See https://hub.docker.com/r/bitnami/phppgadmin
      - DATABASE_HOST=senzing-postgres
    image: bitnami/phppgadmin:${SENZING_DOCKER_IMAGE_VERSION_BITNAMI_PHPPGADMIN:-latest}
    networks:
      - backend
    ports:
      - 9171:8080
      - 9172:443
    restart: always

  initcontainer:
    container_name: senzing-init-container
    depends_on:
      - postgres
      - postgresinit
      - kibana
    environment:
#     See https://github.com/Senzing/docker-init-container#configuration
      SENZING_DATABASE_URL: "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-senzing-postgres}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-G2}"
      SENZING_DELAY_IN_SECONDS: 30
    image: senzing/init-container:${SENZING_DOCKER_IMAGE_VERSION_INIT_CONTAINER:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-init-container"
    networks:
      - backend
    restart: on-failure
    user: "0"
    volumes:
      - ${SENZING_DATA_VERSION_DIR:-/opt/senzing/data/2.0.0}:/opt/senzing/data
      - ${SENZING_ETC_DIR:-/etc/opt/senzing}:/etc/opt/senzing
      - ${SENZING_G2_DIR:-/opt/senzing/g2}:/opt/senzing/g2

  console:
    cap_add:
      - ALL
    container_name: senzing-console
    depends_on:
      - kibana
    environment:
      SENZING_ENGINE_CONFIGURATION_JSON: >-
        {
          "PIPELINE": {
            "CONFIGPATH": "/etc/opt/senzing",
            "RESOURCEPATH": "/opt/senzing/g2/resources",
            "SUPPORTPATH": "/opt/senzing/data"
          },
          "SQL": {
            "CONNECTION": "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-senzing-postgres}:${POSTGRES_PORT:-5432}:${POSTGRES_DB:-G2}/"
          }
        }
    image: senzing/senzing-console:${SENZING_DOCKER_IMAGE_VERSION_SENZING_CONSOLE:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-console"
    networks:
      - backend
    restart: always
    volumes:
      - ${SENZING_DATA_VERSION_DIR:-/opt/senzing/data/2.0.0}:/opt/senzing/data
      - ${SENZING_ETC_DIR:-/etc/opt/senzing}:/etc/opt/senzing
      - ${SENZING_G2_DIR:-/opt/senzing/g2}:/opt/senzing/g2
      - ${SENZING_VAR_DIR:-/var/opt/senzing}:/var/opt/senzing

  loader:
    container_name: senzing-stream-loader
    depends_on:
      - rabbitmq
      - postgres
      - kibana
    environment:
      LC_CTYPE: en_US.utf8
#     See https://github.com/Senzing/stream-loader#configuration
      SENZING_DATABASE_URL: "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-senzing-postgres}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-G2}"
      SENZING_ENGINE_CONFIGURATION_JSON: >-
        {
          "PIPELINE": {
            "CONFIGPATH": "/etc/opt/senzing",
            "RESOURCEPATH": "/opt/senzing/g2/resources",
            "SUPPORTPATH": "/opt/senzing/data"
          },
          "SQL": {
            "CONNECTION": "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-senzing-postgres}:${POSTGRES_PORT:-5432}:${POSTGRES_DB:-G2}/"
          }
        }
      SENZING_DATA_SOURCE: ${SENZING_DATA_SOURCE:-TEST}
      SENZING_DELAY_IN_SECONDS: 60
      SENZING_ENTITY_TYPE: ${SENZING_ENTITY_TYPE:-GENERIC}
      SENZING_MONITORING_PERIOD_IN_SECONDS: ${SENZING_MONITORING_PERIOD_IN_SECONDS:-60}
      SENZING_RABBITMQ_HOST: senzing-rabbitmq
      SENZING_RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-bitnami}
      SENZING_RABBITMQ_QUEUE: senzing-rabbitmq-queue
      SENZING_RABBITMQ_USERNAME: ${RABBITMQ_USERNAME:-user}
      SENZING_SUBCOMMAND: rabbitmq
    image: senzing/stream-loader:${SENZING_DOCKER_IMAGE_VERSION_STREAM_LOADER:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-stream-loader"
    networks:
      - backend
    restart: always
    volumes:
      - ${SENZING_DATA_VERSION_DIR:-/opt/senzing/data/2.0.0}:/opt/senzing/data
      - ${SENZING_ETC_DIR:-/etc/opt/senzing}:/etc/opt/senzing
      - ${SENZING_G2_DIR:-/opt/senzing/g2}:/opt/senzing/g2

  redoer:
    container_name: senzing-redoer
    depends_on:
      - loader
      - kibana
    environment:
#     See https://github.com/Senzing/redoer#configuration
      SENZING_DATABASE_URL: "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-senzing-postgres}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-G2}"
      SENZING_ENGINE_CONFIGURATION_JSON: >-
        {
          "PIPELINE": {
            "CONFIGPATH": "/etc/opt/senzing",
            "RESOURCEPATH": "/opt/senzing/g2/resources",
            "SUPPORTPATH": "/opt/senzing/data"
          },
          "SQL": {
            "CONNECTION": "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-senzing-postgres}:${POSTGRES_PORT:-5432}:${POSTGRES_DB:-G2}/"
          }
        }
      SENZING_DELAY_IN_SECONDS: 60
      SENZING_MONITORING_PERIOD_IN_SECONDS: ${SENZING_MONITORING_PERIOD_IN_SECONDS:-60}
      SENZING_SUBCOMMAND: redo
    image: senzing/redoer:${SENZING_DOCKER_IMAGE_VERSION_REDOER:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-redoer"
    networks:
      - backend
    privileged: true
    restart: on-failure
    user: "0"
    volumes:
      - ${SENZING_DATA_VERSION_DIR:-/opt/senzing/data/2.0.0}:/opt/senzing/data
      - ${SENZING_ETC_DIR:-/etc/opt/senzing}:/etc/opt/senzing
      - ${SENZING_G2_DIR:-/opt/senzing/g2}:/opt/senzing/g2

  api:
    container_name: senzing-api-server
    depends_on:
      - kibana
    environment:
      SENZING_API_SERVER_ALLOWED_ORIGINS: '*'
      SENZING_API_SERVER_BIND_ADDR: 'all'
      SENZING_API_SERVER_ENABLE_ADMIN: 'true'
      SENZING_API_SERVER_PORT: '8250'
      SENZING_API_SERVER_SKIP_ENGINE_PRIMING: 'true'
      SENZING_API_SERVER_SKIP_STARTUP_PERF: 'true'
      SENZING_API_SERVER_INIT_JSON: >-
        {
          "PIPELINE": {
            "CONFIGPATH": "/etc/opt/senzing",
            "RESOURCEPATH": "/opt/senzing/g2/resources",
            "SUPPORTPATH": "/opt/senzing/data"
          },
          "SQL": {
            "CONNECTION": "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-senzing-postgres}:${POSTGRES_PORT:-5432}:${POSTGRES_DB:-G2}/"
          }
        }
      SENZING_ENGINE_CONFIGURATION_JSON: >-
        {
          "PIPELINE": {
            "CONFIGPATH": "/etc/opt/senzing",
            "RESOURCEPATH": "/opt/senzing/g2/resources",
            "SUPPORTPATH": "/opt/senzing/data"
          },
          "SQL": {
            "CONNECTION": "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-senzing-postgres}:${POSTGRES_PORT:-5432}:${POSTGRES_DB:-G2}/"
          }
        }
    image: senzing/senzing-api-server:${SENZING_DOCKER_IMAGE_VERSION_SENZING_API_SERVER:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-api-server"
    networks:
      - backend
    ports:
      - 8250:8250
    restart: always
    volumes:
      - ${SENZING_DATA_VERSION_DIR:-/opt/senzing/data/2.0.0}:/opt/senzing/data
      - ${SENZING_ETC_DIR:-/etc/opt/senzing}:/etc/opt/senzing
      - ${SENZING_G2_DIR:-/opt/senzing/g2}:/opt/senzing/g2

  webapp:
    container_name: senzing-webapp
    depends_on:
      - api
      - kibana
    environment:
#     See https://github.com/Senzing/entity-search-web-app#configuration
      SENZING_API_SERVER_URL: http://senzing-api-server:8250
      SENZING_WEB_SERVER_ADMIN_AUTH_MODE: JWT
      SENZING_WEB_SERVER_ADMIN_AUTH_PATH: http://senzing-webapp:8251
      SENZING_WEB_SERVER_API_PATH: /api
      SENZING_WEB_SERVER_PORT: 8251
      SENZING_WEB_SERVER_URL: http://senzing-webapp:8251
    image: senzing/entity-search-web-app:${SENZING_DOCKER_IMAGE_VERSION_ENTITY_SEARCH_WEB_APP:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-webapp"
    networks:
      - backend
    ports:
      - 8251:8251
    restart: always

  jupyter:
    container_name: senzing-jupyter
    depends_on:
      - kibana
    command:
      - start.sh
      - jupyter
      - notebook
      - "--NotebookApp.token=''"
    depends_on:
      - loader
    environment:
#     See https://github.com/Senzing/docker-jupyter#configuration
      SENZING_SQL_CONNECTION: "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@senzing-postgres:5432:${POSTGRES_DB:-G2}/"
      SENZING_ENGINE_CONFIGURATION_JSON: >-
        {
          "PIPELINE": {
            "CONFIGPATH": "/etc/opt/senzing",
            "RESOURCEPATH": "/opt/senzing/g2/resources",
            "SUPPORTPATH": "/opt/senzing/data"
          },
          "SQL": {
            "CONNECTION": "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-senzing-postgres}:${POSTGRES_PORT:-5432}:${POSTGRES_DB:-G2}/"
          }
        }
    image: senzing/jupyter:${SENZING_DOCKER_IMAGE_VERSION_JUPYTER:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-jupyter"
    networks:
      - backend
    ports:
      - 9178:8888
    restart: always
    volumes:
      - ${JUPYTER_NOTEBOOKS_SHARED_DIR:-~}:/notebooks/shared
      - ${SENZING_DATA_VERSION_DIR:-/opt/senzing/data/2.0.0}:/opt/senzing/data
      - ${SENZING_ETC_DIR:-/etc/opt/senzing}:/etc/opt/senzing
      - ${SENZING_G2_DIR:-/opt/senzing/g2}:/opt/senzing/g2

  sshd:
    cap_add:
      - ALL
    container_name: senzing-sshd
    depends_on:
      - kibana
    environment:
      ROOT_PASSWORD: ${SENZING_SSHD_PASSWORD:-senzingsshdpassword}
      SENZING_ENGINE_CONFIGURATION_JSON: >-
        {
          "PIPELINE": {
            "CONFIGPATH": "/etc/opt/senzing",
            "RESOURCEPATH": "/opt/senzing/g2/resources",
            "SUPPORTPATH": "/opt/senzing/data"
          },
          "SQL": {
            "CONNECTION": "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-senzing-postgres}:${POSTGRES_PORT:-5432}:${POSTGRES_DB:-G2}/"
          }
        }
    image: senzing/sshd:${SENZING_DOCKER_IMAGE_VERSION_SSHD:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-sshd"
    networks:
      - backend
    ports:
      - "${SENZING_SSHD_PORT:-9181}:22"
    restart: always
    volumes:
      - ${SENZING_DATA_VERSION_DIR:-/opt/senzing/data/2.0.0}:/opt/senzing/data
      - ${SENZING_ETC_DIR:-/etc/opt/senzing}:/etc/opt/senzing
      - ${SENZING_G2_DIR:-/opt/senzing/g2}:/opt/senzing/g2
      - ${SENZING_VAR_DIR:-/var/opt/senzing}:/var/opt/senzing

  xterm:
    container_name: senzing-xterm
    depends_on:
      - kibana
    environment:
      SENZING_ENGINE_CONFIGURATION_JSON: >-
        {
          "PIPELINE": {
            "CONFIGPATH": "/etc/opt/senzing",
            "RESOURCEPATH": "/opt/senzing/g2/resources",
            "SUPPORTPATH": "/opt/senzing/data"
          },
          "SQL": {
            "CONNECTION": "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-senzing-postgres}:${POSTGRES_PORT:-5432}:${POSTGRES_DB:-G2}/"
          }
        }
    image: senzing/xterm:${SENZING_DOCKER_IMAGE_VERSION_XTERM:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-xterm"
    networks:
      - backend
    ports:
      - 8254:5000
    restart: always
    volumes:
      - ${SENZING_DATA_VERSION_DIR:-/opt/senzing/data/2.0.0}:/opt/senzing/data
      - ${SENZING_ETC_DIR:-/etc/opt/senzing}:/etc/opt/senzing
      - ${SENZING_G2_DIR:-/opt/senzing/g2}:/opt/senzing/g2
      - ${SENZING_VAR_DIR:-/var/opt/senzing}:/var/opt/senzing

  swaggerui:
    container_name: senzing-swaggerui
    depends_on:
      - kibana
    environment:
      URL: "https://raw.githubusercontent.com/Senzing/senzing-rest-api-specification/master/senzing-rest-api.yaml"
    image: swaggerapi/swagger-ui:${SENZING_DOCKER_IMAGE_VERSION_SWAGGERAPI_SWAGGER_UI:-v3.51.0}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-swaggerui"
    networks:
      - backend
    ports:
      - 9180:8080
    restart: always

networks:
  backend:
  ELK:
