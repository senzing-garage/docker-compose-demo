version: '3'
services:

  # makefile makes a metadata file for pgadmin.

  makefile:
    container_name: senzing-makefile
    command:
      - sh
      - -c
      - echo $${FILE_CONTENTS} >> /output/servers.json
    environment:
      FILE_CONTENTS: >-
        {
          "Servers": {
            "1": {
              "Name": "senzing",
              "Group": "Servers",
              "Host": "senzing-postgres",
              "Port": 5432,
              "MaintenanceDB": "postgres",
              "Username": "postgres",
              "SSLMode": "prefer",
              "SSLCert": "<STORAGE_DIR>/.postgresql/postgresql.crt",
              "SSLKey": "<STORAGE_DIR>/.postgresql/postgresql.key",
              "SSLCompression": 0,
              "Timeout": 10,
              "UseSSHTunnel": 0,
              "TunnelPort": "22",
              "TunnelAuthentication": 0
            }
          }
        }
    image: busybox:${SENZING_DOCKER_IMAGE_VERSION_BUSYBOX:-latest}
    read_only: true
    user: ${SENZING_UID:-1001}:${SENZING_GID:-1001}
    volumes:
      - ${PGADMIN_DIR:-/var/lib/pgadmin/storage}:/output

  kibana-dashboard:
    container_name: senzing-kibana-dashboard
    command:
      - sh
      - -c
      - |
        apk update
        apk upgrade
        apk add bash
        echo $${UPLOAD_FILE} | base64 -d >  /tmp/upload.sh;
        echo $${EXPORT_FILE} | base64 -d > /tmp/export.ndjson;
        chmod a+x /tmp/upload.sh;
        bash /tmp/upload.sh
    environment:
      EXPORT_FILE: >-
        eyJhdHRyaWJ1dGVzIjp7ImZpZWxkQXR0cnMiOiJ7XCJjb250YWluZXJfbmFtZVwiOntcImNvdW50XCI6Mn0sXCJtZXNzYWdlXCI6e1wiY291bnRcIjo3fSxcInZlcnNpb25cIjp7XCJjb3VudFwiOjJ9fSIsImZpZWxkcyI6IltdIiwicnVudGltZUZpZWxkTWFwIjoie30iLCJ0aW1lRmllbGROYW1lIjoiQHRpbWVzdGFtcCIsInRpdGxlIjoibG9nKiIsInR5cGVNZXRhIjoie30ifSwiY29yZU1pZ3JhdGlvblZlcnNpb24iOiI4LjEuMyIsImlkIjoiODY4MzUxYTAtZTEwMi0xMWVjLWFiZjEtNTk5MTI2OWM5NjFmIiwibWlncmF0aW9uVmVyc2lvbiI6eyJpbmRleC1wYXR0ZXJuIjoiOC4wLjAifSwicmVmZXJlbmNlcyI6W10sInR5cGUiOiJpbmRleC1wYXR0ZXJuIiwidXBkYXRlZF9hdCI6IjIwMjItMDUtMzFUMTc6NTg6MTUuNTMwWiIsInZlcnNpb24iOiJXell3TWl3eFhRPT0ifQp7ImF0dHJpYnV0ZXMiOnsiY29sdW1ucyI6WyJtZXNzYWdlIiwiY29udGFpbmVyX25hbWUiXSwiZGVzY3JpcHRpb24iOiJTaG93IHNlbnppbmcgbG9ncyB0aGF0IGNvbnRhaW4gZXJyb3JzIiwiZ3JpZCI6e30sImhpZGVDaGFydCI6ZmFsc2UsImtpYmFuYVNhdmVkT2JqZWN0TWV0YSI6eyJzZWFyY2hTb3VyY2VKU09OIjoie1wicXVlcnlcIjp7XCJxdWVyeVwiOlwibWVzc2FnZSA6IGVycipcIixcImxhbmd1YWdlXCI6XCJrdWVyeVwifSxcImZpbHRlclwiOltdLFwiaW5kZXhSZWZOYW1lXCI6XCJraWJhbmFTYXZlZE9iamVjdE1ldGEuc2VhcmNoU291cmNlSlNPTi5pbmRleFwifSJ9LCJzb3J0IjpbWyJAdGltZXN0YW1wIiwiZGVzYyJdXSwidGl0bGUiOiJTZW56aW5nIGVycm9yIGxvZ3MifSwiY29yZU1pZ3JhdGlvblZlcnNpb24iOiI4LjEuMyIsImlkIjoiMDBkN2EzMTAtZTEwOS0xMWVjLWFiZjEtNTk5MTI2OWM5NjFmIiwibWlncmF0aW9uVmVyc2lvbiI6eyJzZWFyY2giOiI4LjAuMCJ9LCJyZWZlcmVuY2VzIjpbeyJpZCI6Ijg2ODM1MWEwLWUxMDItMTFlYy1hYmYxLTU5OTEyNjljOTYxZiIsIm5hbWUiOiJraWJhbmFTYXZlZE9iamVjdE1ldGEuc2VhcmNoU291cmNlSlNPTi5pbmRleCIsInR5cGUiOiJpbmRleC1wYXR0ZXJuIn1dLCJ0eXBlIjoic2VhcmNoIiwidXBkYXRlZF9hdCI6IjIwMjItMDUtMzFUMTc6NDg6MjUuMzgyWiIsInZlcnNpb24iOiJXelE0Tml3eFhRPT0ifQp7ImF0dHJpYnV0ZXMiOnsiY29sdW1ucyI6WyJtZXNzYWdlIiwiY29udGFpbmVyX25hbWUiXSwiZGVzY3JpcHRpb24iOiJTZW56aW5nIGVuZ2luZSBzdGF0cyBsb2dzIiwiZ3JpZCI6e30sImhpZGVDaGFydCI6ZmFsc2UsImtpYmFuYVNhdmVkT2JqZWN0TWV0YSI6eyJzZWFyY2hTb3VyY2VKU09OIjoie1wicXVlcnlcIjp7XCJxdWVyeVwiOlwibWVzc2FnZSA6IFxcXCJzZW56aW5nLTUwMDEwMTI1SSBHMiBlbmdpbmUgc3RhdGlzdGljc1xcXCJcIixcImxhbmd1YWdlXCI6XCJrdWVyeVwifSxcImZpbHRlclwiOltdLFwiaW5kZXhSZWZOYW1lXCI6XCJraWJhbmFTYXZlZE9iamVjdE1ldGEuc2VhcmNoU291cmNlSlNPTi5pbmRleFwifSJ9LCJzb3J0IjpbWyJAdGltZXN0YW1wIiwiZGVzYyJdXSwidGl0bGUiOiJTZW56aW5nIGVuZ2luZSBzdGF0cyBsb2dzIn0sImNvcmVNaWdyYXRpb25WZXJzaW9uIjoiOC4xLjMiLCJpZCI6IjZlMmYxZjYwLWUxMDktMTFlYy1hYmYxLTU5OTEyNjljOTYxZiIsIm1pZ3JhdGlvblZlcnNpb24iOnsic2VhcmNoIjoiOC4wLjAifSwicmVmZXJlbmNlcyI6W3siaWQiOiI4NjgzNTFhMC1lMTAyLTExZWMtYWJmMS01OTkxMjY5Yzk2MWYiLCJuYW1lIjoia2liYW5hU2F2ZWRPYmplY3RNZXRhLnNlYXJjaFNvdXJjZUpTT04uaW5kZXgiLCJ0eXBlIjoiaW5kZXgtcGF0dGVybiJ9XSwidHlwZSI6InNlYXJjaCIsInVwZGF0ZWRfYXQiOiIyMDIyLTA1LTMxVDE3OjQ4OjI1LjM4MloiLCJ2ZXJzaW9uIjoiV3pRNE55d3hYUT09In0KeyJhdHRyaWJ1dGVzIjp7ImNvbHVtbnMiOlsibWVzc2FnZSIsImNvbnRhaW5lcl9uYW1lIl0sImRlc2NyaXB0aW9uIjoiIiwiZ3JpZCI6e30sImhpZGVDaGFydCI6ZmFsc2UsImtpYmFuYVNhdmVkT2JqZWN0TWV0YSI6eyJzZWFyY2hTb3VyY2VKU09OIjoie1wicXVlcnlcIjp7XCJxdWVyeVwiOlwibWVzc2FnZSA6IFxcXCJHRVRcXFwiXCIsXCJsYW5ndWFnZVwiOlwia3VlcnlcIn0sXCJmaWx0ZXJcIjpbXSxcImluZGV4UmVmTmFtZVwiOlwia2liYW5hU2F2ZWRPYmplY3RNZXRhLnNlYXJjaFNvdXJjZUpTT04uaW5kZXhcIn0ifSwic29ydCI6W1siQHRpbWVzdGFtcCIsImRlc2MiXV0sInRpdGxlIjoiU2VuemluZyBHRVQgbG9ncyJ9LCJjb3JlTWlncmF0aW9uVmVyc2lvbiI6IjguMS4zIiwiaWQiOiJkMjhhMTRmMC1lMTBhLTExZWMtYWJmMS01OTkxMjY5Yzk2MWYiLCJtaWdyYXRpb25WZXJzaW9uIjp7InNlYXJjaCI6IjguMC4wIn0sInJlZmVyZW5jZXMiOlt7ImlkIjoiODY4MzUxYTAtZTEwMi0xMWVjLWFiZjEtNTk5MTI2OWM5NjFmIiwibmFtZSI6ImtpYmFuYVNhdmVkT2JqZWN0TWV0YS5zZWFyY2hTb3VyY2VKU09OLmluZGV4IiwidHlwZSI6ImluZGV4LXBhdHRlcm4ifV0sInR5cGUiOiJzZWFyY2giLCJ1cGRhdGVkX2F0IjoiMjAyMi0wNS0zMVQxNzo1NToxMy45ODNaIiwidmVyc2lvbiI6Ild6VTBNeXd4WFE9PSJ9CnsiYXR0cmlidXRlcyI6eyJjb2x1bW5zIjpbIm1lc3NhZ2UiLCJjb250YWluZXJfbmFtZSJdLCJkZXNjcmlwdGlvbiI6IiIsImdyaWQiOnt9LCJoaWRlQ2hhcnQiOmZhbHNlLCJraWJhbmFTYXZlZE9iamVjdE1ldGEiOnsic2VhcmNoU291cmNlSlNPTiI6IntcInF1ZXJ5XCI6e1wicXVlcnlcIjpcIm1lc3NhZ2UgOiBcXFwic2VuemluZy01MDE3MDAwNUkgR292ZXJub3Igd2FpdGluZ1xcXCJcIixcImxhbmd1YWdlXCI6XCJrdWVyeVwifSxcImZpbHRlclwiOltdLFwiaW5kZXhSZWZOYW1lXCI6XCJraWJhbmFTYXZlZE9iamVjdE1ldGEuc2VhcmNoU291cmNlSlNPTi5pbmRleFwifSJ9LCJzb3J0IjpbWyJAdGltZXN0YW1wIiwiZGVzYyJdXSwidGl0bGUiOiJTZW56aW5nIGdvdmVybm9yIHdhaXQifSwiY29yZU1pZ3JhdGlvblZlcnNpb24iOiI4LjEuMyIsImlkIjoiZTA5NzdlNzAtZTEwYS0xMWVjLWFiZjEtNTk5MTI2OWM5NjFmIiwibWlncmF0aW9uVmVyc2lvbiI6eyJzZWFyY2giOiI4LjAuMCJ9LCJyZWZlcmVuY2VzIjpbeyJpZCI6Ijg2ODM1MWEwLWUxMDItMTFlYy1hYmYxLTU5OTEyNjljOTYxZiIsIm5hbWUiOiJraWJhbmFTYXZlZE9iamVjdE1ldGEuc2VhcmNoU291cmNlSlNPTi5pbmRleCIsInR5cGUiOiJpbmRleC1wYXR0ZXJuIn1dLCJ0eXBlIjoic2VhcmNoIiwidXBkYXRlZF9hdCI6IjIwMjItMDUtMzFUMTc6NTU6MzcuNTU5WiIsInZlcnNpb24iOiJXelUxTXl3eFhRPT0ifQp7ImF0dHJpYnV0ZXMiOnsiZGVzY3JpcHRpb24iOiIiLCJoaXRzIjowLCJraWJhbmFTYXZlZE9iamVjdE1ldGEiOnsic2VhcmNoU291cmNlSlNPTiI6IntcInF1ZXJ5XCI6e1wicXVlcnlcIjpcIlwiLFwibGFuZ3VhZ2VcIjpcImt1ZXJ5XCJ9LFwiZmlsdGVyXCI6W119In0sIm9wdGlvbnNKU09OIjoie1widXNlTWFyZ2luc1wiOnRydWUsXCJzeW5jQ29sb3JzXCI6ZmFsc2UsXCJoaWRlUGFuZWxUaXRsZXNcIjpmYWxzZX0iLCJwYW5lbHNKU09OIjoiW3tcInZlcnNpb25cIjpcIjguMS4zXCIsXCJ0eXBlXCI6XCJzZWFyY2hcIixcImdyaWREYXRhXCI6e1wieFwiOjAsXCJ5XCI6MCxcIndcIjoyNCxcImhcIjoxNSxcImlcIjpcIjA3MjRlOGQzLTYyZDMtNDk4Yi1hYWU0LTI1ZGJjYjZhMGQzY1wifSxcInBhbmVsSW5kZXhcIjpcIjA3MjRlOGQzLTYyZDMtNDk4Yi1hYWU0LTI1ZGJjYjZhMGQzY1wiLFwiZW1iZWRkYWJsZUNvbmZpZ1wiOntcImVuaGFuY2VtZW50c1wiOnt9fSxcInBhbmVsUmVmTmFtZVwiOlwicGFuZWxfMDcyNGU4ZDMtNjJkMy00OThiLWFhZTQtMjVkYmNiNmEwZDNjXCJ9LHtcInZlcnNpb25cIjpcIjguMS4zXCIsXCJ0eXBlXCI6XCJzZWFyY2hcIixcImdyaWREYXRhXCI6e1wieFwiOjI0LFwieVwiOjAsXCJ3XCI6MjQsXCJoXCI6MTUsXCJpXCI6XCI4ZWYyNWE5NS1mY2ZlLTQ2ZDYtOGYwZC02ODhlMDczM2NjNmFcIn0sXCJwYW5lbEluZGV4XCI6XCI4ZWYyNWE5NS1mY2ZlLTQ2ZDYtOGYwZC02ODhlMDczM2NjNmFcIixcImVtYmVkZGFibGVDb25maWdcIjp7XCJlbmhhbmNlbWVudHNcIjp7fX0sXCJwYW5lbFJlZk5hbWVcIjpcInBhbmVsXzhlZjI1YTk1LWZjZmUtNDZkNi04ZjBkLTY4OGUwNzMzY2M2YVwifSx7XCJ2ZXJzaW9uXCI6XCI4LjEuM1wiLFwidHlwZVwiOlwic2VhcmNoXCIsXCJncmlkRGF0YVwiOntcInhcIjowLFwieVwiOjE1LFwid1wiOjI0LFwiaFwiOjE1LFwiaVwiOlwiNDBlNWZlNDgtNTZkMC00MjkzLThmYzMtODU2N2FjZDY0NGIxXCJ9LFwicGFuZWxJbmRleFwiOlwiNDBlNWZlNDgtNTZkMC00MjkzLThmYzMtODU2N2FjZDY0NGIxXCIsXCJlbWJlZGRhYmxlQ29uZmlnXCI6e1wiZW5oYW5jZW1lbnRzXCI6e319LFwicGFuZWxSZWZOYW1lXCI6XCJwYW5lbF80MGU1ZmU0OC01NmQwLTQyOTMtOGZjMy04NTY3YWNkNjQ0YjFcIn0se1widmVyc2lvblwiOlwiOC4xLjNcIixcInR5cGVcIjpcInNlYXJjaFwiLFwiZ3JpZERhdGFcIjp7XCJ4XCI6MjQsXCJ5XCI6MTUsXCJ3XCI6MjQsXCJoXCI6MTUsXCJpXCI6XCI3NjUyN2QyZC0xMTk2LTQ4MjYtOGMwYy1iOTNkZWQ1ZTZhMDBcIn0sXCJwYW5lbEluZGV4XCI6XCI3NjUyN2QyZC0xMTk2LTQ4MjYtOGMwYy1iOTNkZWQ1ZTZhMDBcIixcImVtYmVkZGFibGVDb25maWdcIjp7XCJlbmhhbmNlbWVudHNcIjp7fX0sXCJwYW5lbFJlZk5hbWVcIjpcInBhbmVsXzc2NTI3ZDJkLTExOTYtNDgyNi04YzBjLWI5M2RlZDVlNmEwMFwifV0iLCJ0aW1lUmVzdG9yZSI6ZmFsc2UsInRpdGxlIjoiU2VuemluZyBEYXNoYm9hcmQiLCJ2ZXJzaW9uIjoxfSwiY29yZU1pZ3JhdGlvblZlcnNpb24iOiI4LjEuMyIsImlkIjoiOThkMjBhMjAtZTEwOS0xMWVjLWFiZjEtNTk5MTI2OWM5NjFmIiwibWlncmF0aW9uVmVyc2lvbiI6eyJkYXNoYm9hcmQiOiI4LjEuMCJ9LCJyZWZlcmVuY2VzIjpbeyJpZCI6IjAwZDdhMzEwLWUxMDktMTFlYy1hYmYxLTU5OTEyNjljOTYxZiIsIm5hbWUiOiIwNzI0ZThkMy02MmQzLTQ5OGItYWFlNC0yNWRiY2I2YTBkM2M6cGFuZWxfMDcyNGU4ZDMtNjJkMy00OThiLWFhZTQtMjVkYmNiNmEwZDNjIiwidHlwZSI6InNlYXJjaCJ9LHsiaWQiOiI2ZTJmMWY2MC1lMTA5LTExZWMtYWJmMS01OTkxMjY5Yzk2MWYiLCJuYW1lIjoiOGVmMjVhOTUtZmNmZS00NmQ2LThmMGQtNjg4ZTA3MzNjYzZhOnBhbmVsXzhlZjI1YTk1LWZjZmUtNDZkNi04ZjBkLTY4OGUwNzMzY2M2YSIsInR5cGUiOiJzZWFyY2gifSx7ImlkIjoiZDI4YTE0ZjAtZTEwYS0xMWVjLWFiZjEtNTk5MTI2OWM5NjFmIiwibmFtZSI6IjQwZTVmZTQ4LTU2ZDAtNDI5My04ZmMzLTg1NjdhY2Q2NDRiMTpwYW5lbF80MGU1ZmU0OC01NmQwLTQyOTMtOGZjMy04NTY3YWNkNjQ0YjEiLCJ0eXBlIjoic2VhcmNoIn0seyJpZCI6ImUwOTc3ZTcwLWUxMGEtMTFlYy1hYmYxLTU5OTEyNjljOTYxZiIsIm5hbWUiOiI3NjUyN2QyZC0xMTk2LTQ4MjYtOGMwYy1iOTNkZWQ1ZTZhMDA6cGFuZWxfNzY1MjdkMmQtMTE5Ni00ODI2LThjMGMtYjkzZGVkNWU2YTAwIiwidHlwZSI6InNlYXJjaCJ9XSwidHlwZSI6ImRhc2hib2FyZCIsInVwZGF0ZWRfYXQiOiIyMDIyLTA2LTAyVDE1OjAxOjQwLjcxN1oiLCJ2ZXJzaW9uIjoiV3pZME5Dd3hYUT09In0KeyJleGNsdWRlZE9iamVjdHMiOltdLCJleGNsdWRlZE9iamVjdHNDb3VudCI6MCwiZXhwb3J0ZWRDb3VudCI6NiwibWlzc2luZ1JlZkNvdW50IjowLCJtaXNzaW5nUmVmZXJlbmNlcyI6W119Cg==
      UPLOAD_FILE: >-
        IyEvYmluL2Jhc2gKd2hpbGUgOgpkbwogIHN0YXR1c19jb2RlPSQoY3VybCAtWCBQT1NUIHNlbnppbmcta2liYW5hOjU2MDEvYXBpL3NhdmVkX29iamVjdHMvX2ltcG9ydCAtSCAia2JuLXhzcmY6IHRydWUiIC0tZm9ybSBmaWxlPUAvdG1wL2V4cG9ydC5uZGpzb24gLS13cml0ZS1vdXQgIiV7aHR0cF9jb2RlfSIgLS1zaWxlbnQgLS1vdXRwdXQgL2Rldi9udWxsKQogIGlmIFtbICIkc3RhdHVzX2NvZGUiIC1uZSAyMDAgXV0gOyB0aGVuCiAgICBlY2hvICJ1bnN1Y2Nlc3NmdWwgaW1wb3J0LCB0cnlpbmcgYWdhaW4gaW4gMSBzZWNvbmQhIgogICAgc2xlZXAgMQogIGVsc2UKICAgIGVjaG8gImltcG9ydCBzdWNjZXNzIgogICAgZXhpdCAwCiAgZmkKZG9uZQo=
    image: curlimages/curl:${SENZING_DOCKER_IMAGE_VERSION_CURLIMAGES_CURL:-latest}
    networks:
      - senzing
    user: root

  elasticsearch:
    container_name: senzing-elasticsearch
    environment:
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      xpack.security.enabled: 'false'
    image: elasticsearch:${SENZING_DOCKER_IMAGE_VERSION_ELASTICSEARCH:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-elasticsearch"
    networks:
      - senzing
    ports:
      - 9200:9200
      - 9300:9300
    restart: always
    user: "${SENZING_UID:-1001}:0"
    volumes:
      - ${ELASTICSEARCH_DIR:-/var/elasticsearch}:/usr/share/elasticsearch/data

  logstash:
    command:
      - --config.string
      - >-
        input {
          gelf {
            port => 12201
          }
        }
        output {
          elasticsearch {
            hosts => ["http://elasticsearch:9200"]
            index => "logstash-%{+YYYY-MM-dd}"
          }
        }
    container_name: senzing-logstash
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    image: logstash:${SENZING_DOCKER_IMAGE_VERSION_LOGSTASH:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-logstash"
    networks:
      - senzing
    ports:
      - 9600:9600
      - 12201:12201/udp
    restart: always

  kibana:
    container_name: senzing-kibana
    depends_on:
      - elasticsearch
      - logstash
    image: kibana:${SENZING_DOCKER_IMAGE_VERSION_KIBANA:-latest}
    networks:
      - senzing
    ports:
      - 5601:5601
    restart: always

  rabbitmq:
    container_name: senzing-rabbitmq
    depends_on:
      - logstash
    environment:
#     See https://github.com/bitnami/bitnami-docker-rabbitmq#configuration
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-bitnami}
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME:-user}
    image: bitnami/rabbitmq:${SENZING_DOCKER_IMAGE_VERSION_BITNAMI_RABBITMQ:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-rabbitmq"
    networks:
      - senzing
    ports:
      - 15672:15672
      - 5672:5672
    restart: always
    volumes:
      - ${RABBITMQ_DIR:-/var/rabbitmq}:/bitnami

  producer:
    container_name: senzing-stream-producer
    depends_on:
      - rabbitmq
      - logstash
    environment:
#     See https://github.com/Senzing/stream-producer#configuration
      SENZING_DEFAULT_DATA_SOURCE: ${SENZING_DEFAULT_DATA_SOURCE:-TEST}
      SENZING_DELAY_IN_SECONDS: 30
      SENZING_RABBITMQ_EXCHANGE: senzing-rabbitmq-exchange
      SENZING_RABBITMQ_HOST: senzing-rabbitmq
      SENZING_RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-bitnami}
      SENZING_RABBITMQ_QUEUE: senzing-rabbitmq-queue
      SENZING_RABBITMQ_ROUTING_KEY: senzing.records
      SENZING_RABBITMQ_USERNAME: ${RABBITMQ_USERNAME:-user}
      SENZING_RECORD_MAX: ${SENZING_RECORD_MAX:-5000}
      SENZING_RECORD_MONITOR: 1000
      SENZING_SUBCOMMAND: json-to-rabbitmq
    image: senzing/stream-producer:${SENZING_DOCKER_IMAGE_VERSION_STREAM_PRODUCER:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-producer"
    networks:
      - senzing
    read_only: true
    restart: on-failure
    user: ${SENZING_UID:-1001}:${SENZING_GID:-1001}
    volumes:
      - ${SENZING_VAR_DIR:-/var/opt/senzing}:/var/opt/senzing

  postgres:
    container_name: senzing-postgres
    depends_on:
      - logstash
    environment:
#     See https://github.com/bitnami/bitnami-docker-postgresql#configuration
      POSTGRESQL_DATABASE: ${POSTGRES_DB:-G2}
      POSTGRESQL_PASSWORD: ${POSTGRES_PASSWORD:-senzing}
      POSTGRESQL_POSTGRES_PASSWORD: ${POSTGRESQL_POSTGRES_PASSWORD:-postgres}
      POSTGRESQL_USERNAME: ${POSTGRES_USERNAME:-senzing}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USERNAME:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    image: bitnami/postgresql:${SENZING_DOCKER_IMAGE_VERSION_BITNAMI_POSTGRESQL:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-postgres"
    networks:
      - senzing
    ports:
      - 5432:5432
    restart: always
    user: "${SENZING_UID:-1001}:0"
    volumes:
      - ${POSTGRES_DIR:-/var/lib/postgresql/data}:/bitnami/postgresql

  init-postgresql:
    container_name: senzing-init-postgresql
    depends_on:
      - postgres
      - logstash
    environment:
      LC_CTYPE: en_US.utf8
#     See https://github.com/Senzing/init-postgresql#configuration
#     SENZING_DATABASE_URL: "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-senzing-postgres}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-G2}"
      SENZING_ENGINE_CONFIGURATION_JSON: >-
        {
          "PIPELINE": {
            "CONFIGPATH": "/etc/opt/senzing",
            "LICENSESTRINGBASE64": "${SENZING_LICENSE_BASE64_ENCODED}",
            "RESOURCEPATH": "/opt/senzing/g2/resources",
            "SUPPORTPATH": "/opt/senzing/data"
          },
          "SQL": {
            "BACKEND": "SQL",
            "CONNECTION": "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-senzing-postgres}:${POSTGRES_PORT:-5432}:${POSTGRES_DB:-G2}/"
          }
        }
#     SENZING_INPUT_SQL_URL: "file:///opt/senzing/g2/resources/schema/g2core-schema-postgresql-create.sql"
      SENZING_SUBCOMMAND: mandatory
    image: senzing/init-postgresql:${SENZING_DOCKER_IMAGE_VERSION_INIT_POSTGRESQL:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-init-postgresql"
    networks:
      - senzing
    read_only: true
    restart: on-failure

  pgadmin:
    container_name: senzing-pgadmin
    depends_on:
      - logstash
      - makefile
    environment:
#    See https://www.pgadmin.org/docs/pgadmin4/latest/container_deployment.html
     PGADMIN_CONFIG_DEFAULT_SERVER: '"0.0.0.0"'
     PGADMIN_CONFIG_LOGIN_BANNER: |-
       "<h4>Senzing demonstration</h4>
       Although pgAdmin can be configured for security,
       <br/>the following credentials are used for demonstration.
       <ul>
         <li><b>Username:</b> postgres@postgres.com</li>
         <li><b>Password:</b> password</li>
       </ul>"
     PGADMIN_DEFAULT_EMAIL: postgres@postgres.com
     PGADMIN_DEFAULT_PASSWORD: password
     PGADMIN_SERVER_JSON_FILE: /var/lib/pgadmin/storage/servers.json
    image: dpage/pgadmin4:${SENZING_DOCKER_IMAGE_VERSION_DPAGE_PGADMIN4:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-pgadmin"
    networks:
      - senzing
    ports:
      - 9171:80
      - 9172:443
    restart: always
    user: "${SENZING_UID:-1001}:0"
    volumes:
      - ${PGADMIN_DIR:-/var/lib/pgadmin/storage}:/var/lib/pgadmin/storage

  console:
    cap_add:
      - ALL
    container_name: senzing-console
    depends_on:
      - logstash
    environment:
      SENZING_ENGINE_CONFIGURATION_JSON: >-
        {
          "PIPELINE": {
            "CONFIGPATH": "/etc/opt/senzing",
            "LICENSESTRINGBASE64": "${SENZING_LICENSE_BASE64_ENCODED}",
            "RESOURCEPATH": "/opt/senzing/g2/resources",
            "SUPPORTPATH": "/opt/senzing/data"
          },
          "SQL": {
            "BACKEND": "SQL",
            "CONNECTION": "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-senzing-postgres}:${POSTGRES_PORT:-5432}:${POSTGRES_DB:-G2}/"
          }
        }
    image: senzing/senzing-console:${SENZING_DOCKER_IMAGE_VERSION_SENZING_CONSOLE:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-console"
    networks:
      - senzing
    restart: always
    user: ${SENZING_UID:-1001}:${SENZING_GID:-1001}
    volumes:
      - ${SENZING_VAR_DIR:-/var/opt/senzing}:/var/opt/senzing

  g2configtool:
    command:
      - /bin/bash
      - -c
      - echo "$${SENZING_G2CONFIG_GTC}" >> /tmp/G2Config.gtc; sleep $${SENZING_DELAY_IN_SECONDS}; /opt/senzing/g2/python/G2ConfigTool.py -f /tmp/G2Config.gtc
    container_name: senzing-g2configtools
    depends_on:
      - init-postgresql
      - logstash
    environment:
      LC_CTYPE: en_US.utf8
#     See https://github.com/Senzing/g2configtool
      SENZING_DELAY_IN_SECONDS: 10
      SENZING_ENGINE_CONFIGURATION_JSON: >-
        {
          "PIPELINE": {
            "CONFIGPATH": "/etc/opt/senzing",
            "LICENSESTRINGBASE64": "${SENZING_LICENSE_BASE64_ENCODED}",
            "RESOURCEPATH": "/opt/senzing/g2/resources",
            "SUPPORTPATH": "/opt/senzing/data"
          },
          "SQL": {
            "BACKEND": "SQL",
            "CONNECTION": "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-senzing-postgres}:${POSTGRES_PORT:-5432}:${POSTGRES_DB:-G2}/"
          }
        }
      SENZING_G2CONFIG_GTC: |
        addDataSource CUSTOMERS
        addDataSource REFERENCE
        addDataSource WATCHLIST
        save
    image: senzing/senzingapi-tools:${SENZING_DOCKER_IMAGE_VERSION_SENZINGAPI_TOOLS:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-loader"
    networks:
      - senzing
    read_only: true
    restart: on-failure
    tmpfs:
      - /tmp

  loader:
    container_name: senzing-stream-loader
    depends_on:
      - rabbitmq
      - postgres
      - logstash
    environment:
      LC_CTYPE: en_US.utf8
#     See https://github.com/Senzing/stream-loader#configuration
      SENZING_DELAY_IN_SECONDS: 60
      SENZING_ENGINE_CONFIGURATION_JSON: >-
        {
          "PIPELINE": {
            "CONFIGPATH": "/etc/opt/senzing",
            "LICENSESTRINGBASE64": "${SENZING_LICENSE_BASE64_ENCODED}",
            "RESOURCEPATH": "/opt/senzing/g2/resources",
            "SUPPORTPATH": "/opt/senzing/data"
          },
          "SQL": {
            "BACKEND": "SQL",
            "CONNECTION": "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-senzing-postgres}:${POSTGRES_PORT:-5432}:${POSTGRES_DB:-G2}/"
          }
        }
      SENZING_MONITORING_PERIOD_IN_SECONDS: ${SENZING_MONITORING_PERIOD_IN_SECONDS:-60}
      SENZING_RABBITMQ_HOST: senzing-rabbitmq
      SENZING_RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-bitnami}
      SENZING_RABBITMQ_QUEUE: senzing-rabbitmq-queue
      SENZING_RABBITMQ_USE_EXISTING_ENTITIES: "False"
      SENZING_RABBITMQ_USERNAME: ${RABBITMQ_USERNAME:-user}
      SENZING_SUBCOMMAND: rabbitmq
    image: senzing/stream-loader:${SENZING_DOCKER_IMAGE_VERSION_STREAM_LOADER:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-loader"
    networks:
      - senzing
    read_only: true
    restart: always

  redoer:
    container_name: senzing-redoer
    depends_on:
      - loader
      - logstash
    environment:
#     See https://github.com/Senzing/redoer#configuration
      SENZING_DELAY_IN_SECONDS: 60
      SENZING_ENGINE_CONFIGURATION_JSON: >-
        {
          "PIPELINE": {
            "CONFIGPATH": "/etc/opt/senzing",
            "LICENSESTRINGBASE64": "${SENZING_LICENSE_BASE64_ENCODED}",
            "RESOURCEPATH": "/opt/senzing/g2/resources",
            "SUPPORTPATH": "/opt/senzing/data"
          },
          "SQL": {
            "BACKEND": "SQL",
            "CONNECTION": "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-senzing-postgres}:${POSTGRES_PORT:-5432}:${POSTGRES_DB:-G2}/"
          }
        }
      SENZING_EXIT_ON_THREAD_TERMINATION: ${SENZING_EXIT_ON_THREAD_TERMINATION:-"false"}
      SENZING_MONITORING_PERIOD_IN_SECONDS: ${SENZING_MONITORING_PERIOD_IN_SECONDS:-60}
      SENZING_SUBCOMMAND: redo
    image: senzing/redoer:${SENZING_DOCKER_IMAGE_VERSION_REDOER:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-redoer"
    networks:
      - senzing
    read_only: true
    restart: always

  pocserver:
    container_name: senzing-poc-server
    depends_on:
      - postgres
      - logstash
    environment:
      SENZING_API_SERVER_ALLOWED_ORIGINS: '*'
      SENZING_API_SERVER_BIND_ADDR: 'all'
      SENZING_API_SERVER_ENABLE_ADMIN: 'true'
      SENZING_API_SERVER_PORT: '8250'
      SENZING_API_SERVER_SKIP_ENGINE_PRIMING: 'true'
      SENZING_API_SERVER_SKIP_STARTUP_PERF: 'true'
      SENZING_ENGINE_CONFIGURATION_JSON: >-
        {
          "PIPELINE": {
            "CONFIGPATH": "/etc/opt/senzing",
            "LICENSESTRINGBASE64": "${SENZING_LICENSE_BASE64_ENCODED}",
            "RESOURCEPATH": "/opt/senzing/g2/resources",
            "SUPPORTPATH": "/opt/senzing/data"
          },
          "SQL": {
            "BACKEND": "SQL",
            "CONNECTION": "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-senzing-postgres}:${POSTGRES_PORT:-5432}:${POSTGRES_DB:-G2}/"
          }
        }
      SENZING_RABBITMQ_LOAD_EXCHANGE: senzing-rabbitmq-exchange
      SENZING_RABBITMQ_LOAD_HOST: senzing-rabbitmq
      SENZING_RABBITMQ_LOAD_PASSWORD: ${RABBITMQ_PASSWORD:-bitnami}
      SENZING_RABBITMQ_LOAD_PORT: 5672
      SENZING_RABBITMQ_LOAD_ROUTING_KEY: senzing.records
      SENZING_RABBITMQ_LOAD_USERNAME: ${RABBITMQ_USERNAME:-user}
      SENZING_RABBITMQ_LOAD_VIRTUAL_HOST: "/"
    image: senzing/senzing-poc-server:${SENZING_DOCKER_IMAGE_VERSION_SENZING_POC_SERVER:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-pocserver"
    networks:
      - senzing
    ports:
      - 8250:8250
    read_only: true
    restart: always
    tmpfs:
      - /tmp

  webapp:
    container_name: senzing-webapp
    depends_on:
      - pocserver
      - logstash
      - webapp-console
    environment:
#     See https://github.com/Senzing/entity-search-web-app#configuration
      SENZING_API_SERVER_URL: http://senzing-poc-server:8250
      SENZING_CONSOLE_SERVER_URL: ws://senzing-webapp-console:8257
      SENZING_WEB_SERVER_ADMIN_AUTH_MODE: NONE
      SENZING_WEB_SERVER_ADMIN_AUTH_PATH: http://senzing-webapp:8251
      SENZING_WEB_SERVER_INTERNAL_URL: http://senzing-webapp:8251
      SENZING_WEB_SERVER_PORT: 8251
      SENZING_WEB_SERVER_STREAM_CLIENT_URL: wss://senzing-poc-server:8250/ws
    image: senzing/entity-search-web-app:${SENZING_DOCKER_IMAGE_VERSION_ENTITY_SEARCH_WEB_APP:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-webapp"
    networks:
      - senzing
    ports:
      - 8251:8251
      - 8257:8257
    read_only: true
    restart: always

  webapp-console:
    container_name: senzing-webapp-console
    environment:
      SENZING_CONSOLE_SERVER_PORT: 8257
      SENZING_ENGINE_CONFIGURATION_JSON: >-
        {
          "PIPELINE": {
            "CONFIGPATH": "/etc/opt/senzing",
            "LICENSESTRINGBASE64": "${SENZING_LICENSE_BASE64_ENCODED}",
            "RESOURCEPATH": "/opt/senzing/g2/resources",
            "SUPPORTPATH": "/opt/senzing/data"
          },
          "SQL": {
            "BACKEND": "SQL",
            "CONNECTION": "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-senzing-postgres}:${POSTGRES_PORT:-5432}:${POSTGRES_DB:-G2}/"
          }
        }
    image: senzing/entity-search-web-app-console:${SENZING_DOCKER_IMAGE_VERSION_ENTITY_SEARCH_WEB_APP_CONSOLE:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-webapp-console"
    networks:
      - senzing
    restart: always
    user: ${SENZING_UID:-1001}:${SENZING_GID:-1001}
    volumes:
      - ${SENZING_VAR_DIR:-/var/opt/senzing}:/var/opt/senzing

  jupyter:
    container_name: senzing-jupyter
    command:
      - start.sh
      - jupyter
      - lab
      - "--NotebookApp.token=''"
    depends_on:
      - loader
      - logstash
    environment:
#     See https://github.com/Senzing/docker-jupyter#configuration
      SENZING_ENGINE_CONFIGURATION_JSON: >-
        {
          "PIPELINE": {
            "CONFIGPATH": "/etc/opt/senzing",
            "LICENSESTRINGBASE64": "${SENZING_LICENSE_BASE64_ENCODED}",
            "RESOURCEPATH": "/opt/senzing/g2/resources",
            "SUPPORTPATH": "/opt/senzing/data"
          },
          "SQL": {
            "BACKEND": "SQL",
            "CONNECTION": "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-senzing-postgres}:${POSTGRES_PORT:-5432}:${POSTGRES_DB:-G2}/"
          }
        }
      SENZING_SQL_CONNECTION: "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@senzing-postgres:5432:${POSTGRES_DB:-G2}/"
    image: senzing/jupyter:${SENZING_DOCKER_IMAGE_VERSION_JUPYTER:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-jupyter"
    networks:
      - senzing
    ports:
      - 9178:8888
    restart: always
    volumes:
      - ${JUPYTER_NOTEBOOKS_SHARED_DIR:-~}:/notebooks/shared

  sshd:
    cap_add:
      - ALL
    container_name: senzing-sshd
    depends_on:
      - logstash
    environment:
      ROOT_PASSWORD: ${SENZING_SSHD_PASSWORD:-senzingsshdpassword}
      SENZING_ENGINE_CONFIGURATION_JSON: >-
        {
          "PIPELINE": {
            "CONFIGPATH": "/etc/opt/senzing",
            "LICENSESTRINGBASE64": "${SENZING_LICENSE_BASE64_ENCODED}",
            "RESOURCEPATH": "/opt/senzing/g2/resources",
            "SUPPORTPATH": "/opt/senzing/data"
          },
          "SQL": {
            "BACKEND": "SQL",
            "CONNECTION": "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-senzing-postgres}:${POSTGRES_PORT:-5432}:${POSTGRES_DB:-G2}/"
          }
        }
    image: senzing/sshd:${SENZING_DOCKER_IMAGE_VERSION_SSHD:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-sshd"
    networks:
      - senzing
    ports:
      - "${SENZING_SSHD_PORT:-9181}:22"
    restart: always
    volumes:
      - ${SENZING_VAR_DIR:-/var/opt/senzing}:/var/opt/senzing

  xterm:
    container_name: senzing-xterm
    depends_on:
      - logstash
    environment:
      SENZING_ENGINE_CONFIGURATION_JSON: >-
        {
          "PIPELINE": {
            "CONFIGPATH": "/etc/opt/senzing",
            "LICENSESTRINGBASE64": "${SENZING_LICENSE_BASE64_ENCODED}",
            "RESOURCEPATH": "/opt/senzing/g2/resources",
            "SUPPORTPATH": "/opt/senzing/data"
          },
          "SQL": {
            "BACKEND": "SQL",
            "CONNECTION": "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-senzing-postgres}:${POSTGRES_PORT:-5432}:${POSTGRES_DB:-G2}/"
          }
        }
    image: senzing/xterm:${SENZING_DOCKER_IMAGE_VERSION_XTERM:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-xterm"
    networks:
      - senzing
    ports:
      - 8254:5000
    restart: always
    user: ${SENZING_UID:-1001}:${SENZING_GID:-1001}
    volumes:
      - ${SENZING_VAR_DIR:-/var/opt/senzing}:/var/opt/senzing

networks:
  senzing:
    name: ${SENZING_DOCKER_NETWORK:-senzing-network}
