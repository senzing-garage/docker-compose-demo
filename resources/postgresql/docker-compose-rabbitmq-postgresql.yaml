version: '3'
services:

  makefile:
    container_name: senzing-makefile
    command:
      - sh
      - -c
      - echo $${FILE_CONTENTS} >> /output/servers.json
    environment:
      FILE_CONTENTS: >-
        {
          "Servers": {
            "1": {
              "Name": "senzing",
              "Group": "Servers",
              "Host": "senzing-postgres",
              "Port": 5432,
              "MaintenanceDB": "postgres",
              "Username": "postgres",
              "SSLMode": "prefer",
              "SSLCert": "<STORAGE_DIR>/.postgresql/postgresql.crt",
              "SSLKey": "<STORAGE_DIR>/.postgresql/postgresql.key",
              "SSLCompression": 0,
              "Timeout": 10,
              "UseSSHTunnel": 0,
              "TunnelPort": "22",
              "TunnelAuthentication": 0
            }
          }
        }
    image: busybox:${SENZING_DOCKER_IMAGE_VERSION_BUSYBOX:-latest}
    read_only: true
    user: ${SENZING_UID:-1001}:${SENZING_GID:-1001}
    volumes:
      - ${PGADMIN_DIR:-/var/lib/pgadmin/storage}:/output

  kibana-dashboard:
    container_name: senzing-kibana-dashboard
    command:
      - sh
      - -c
      - echo $${UPLOAD_FILE} >> /tmp/upload.sh; echo $${EXPORT_FILE} >> /tmp/export.ndjson; chmod a+x upload.sh; . /tmp/upload.sh
    environment:
      UPLOAD_FILE: >-
        #!/bin/bash
        while :
        do
          status_code=$$(curl -X POST localhost:5601/api/saved_objects/_import -H "kbn-xsrf: true" --form file=@/tmp/export.ndjson --write-out "%{http_code}" --silent --output /dev/null)
          if [[ "$$status_code" -ne 200 ]] ; then
            echo "unsuccessful import, trying again in 1 second!"
            sleep 1
          else
            echo "import success"
            exit 0
          fi
        done
      EXPORT_FILE: >-
        {"attributes":{"fieldAttrs":"{\"container_name\":{\"count\":2},\"message\":{\"count\":7},\"version\":{\"count\":2}}","fields":"[]","runtimeFieldMap":"{}","timeFieldName":"@timestamp","title":"log*","typeMeta":"{}"},"coreMigrationVersion":"8.1.3","id":"868351a0-e102-11ec-abf1-5991269c961f","migrationVersion":{"index-pattern":"8.0.0"},"references":[],"type":"index-pattern","updated_at":"2022-05-31T17:58:15.530Z","version":"WzYwMiwxXQ=="}
        {"attributes":{"columns":["message","container_name"],"description":"Show senzing logs that contain errors","grid":{},"hideChart":false,"kibanaSavedObjectMeta":{"searchSourceJSON":"{\"query\":{\"query\":\"message : err*\",\"language\":\"kuery\"},\"filter\":[],\"indexRefName\":\"kibanaSavedObjectMeta.searchSourceJSON.index\"}"},"sort":[["@timestamp","desc"]],"title":"Senzing error logs"},"coreMigrationVersion":"8.1.3","id":"00d7a310-e109-11ec-abf1-5991269c961f","migrationVersion":{"search":"8.0.0"},"references":[{"id":"868351a0-e102-11ec-abf1-5991269c961f","name":"kibanaSavedObjectMeta.searchSourceJSON.index","type":"index-pattern"}],"type":"search","updated_at":"2022-05-31T17:48:25.382Z","version":"WzQ4NiwxXQ=="}
        {"attributes":{"columns":["message","container_name"],"description":"Senzing engine stats logs","grid":{},"hideChart":false,"kibanaSavedObjectMeta":{"searchSourceJSON":"{\"query\":{\"query\":\"message : \\\"senzing-50010125I G2 engine statistics\\\"\",\"language\":\"kuery\"},\"filter\":[],\"indexRefName\":\"kibanaSavedObjectMeta.searchSourceJSON.index\"}"},"sort":[["@timestamp","desc"]],"title":"Senzing engine stats logs"},"coreMigrationVersion":"8.1.3","id":"6e2f1f60-e109-11ec-abf1-5991269c961f","migrationVersion":{"search":"8.0.0"},"references":[{"id":"868351a0-e102-11ec-abf1-5991269c961f","name":"kibanaSavedObjectMeta.searchSourceJSON.index","type":"index-pattern"}],"type":"search","updated_at":"2022-05-31T17:48:25.382Z","version":"WzQ4NywxXQ=="}
        {"attributes":{"columns":["message","container_name"],"description":"","grid":{},"hideChart":false,"kibanaSavedObjectMeta":{"searchSourceJSON":"{\"query\":{\"query\":\"message : \\\"GET\\\"\",\"language\":\"kuery\"},\"filter\":[],\"indexRefName\":\"kibanaSavedObjectMeta.searchSourceJSON.index\"}"},"sort":[["@timestamp","desc"]],"title":"Senzing GET logs"},"coreMigrationVersion":"8.1.3","id":"d28a14f0-e10a-11ec-abf1-5991269c961f","migrationVersion":{"search":"8.0.0"},"references":[{"id":"868351a0-e102-11ec-abf1-5991269c961f","name":"kibanaSavedObjectMeta.searchSourceJSON.index","type":"index-pattern"}],"type":"search","updated_at":"2022-05-31T17:55:13.983Z","version":"WzU0MywxXQ=="}
        {"attributes":{"columns":["message","container_name"],"description":"","grid":{},"hideChart":false,"kibanaSavedObjectMeta":{"searchSourceJSON":"{\"query\":{\"query\":\"message : \\\"senzing-50170005I Governor waiting\\\"\",\"language\":\"kuery\"},\"filter\":[],\"indexRefName\":\"kibanaSavedObjectMeta.searchSourceJSON.index\"}"},"sort":[["@timestamp","desc"]],"title":"Senzing governor wait"},"coreMigrationVersion":"8.1.3","id":"e0977e70-e10a-11ec-abf1-5991269c961f","migrationVersion":{"search":"8.0.0"},"references":[{"id":"868351a0-e102-11ec-abf1-5991269c961f","name":"kibanaSavedObjectMeta.searchSourceJSON.index","type":"index-pattern"}],"type":"search","updated_at":"2022-05-31T17:55:37.559Z","version":"WzU1MywxXQ=="}
        {"attributes":{"description":"","hits":0,"kibanaSavedObjectMeta":{"searchSourceJSON":"{\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[]}"},"optionsJSON":"{\"useMargins\":true,\"syncColors\":false,\"hidePanelTitles\":false}","panelsJSON":"[{\"version\":\"8.1.3\",\"type\":\"search\",\"gridData\":{\"x\":0,\"y\":0,\"w\":24,\"h\":15,\"i\":\"0724e8d3-62d3-498b-aae4-25dbcb6a0d3c\"},\"panelIndex\":\"0724e8d3-62d3-498b-aae4-25dbcb6a0d3c\",\"embeddableConfig\":{\"enhancements\":{}},\"panelRefName\":\"panel_0724e8d3-62d3-498b-aae4-25dbcb6a0d3c\"},{\"version\":\"8.1.3\",\"type\":\"search\",\"gridData\":{\"x\":24,\"y\":0,\"w\":24,\"h\":15,\"i\":\"8ef25a95-fcfe-46d6-8f0d-688e0733cc6a\"},\"panelIndex\":\"8ef25a95-fcfe-46d6-8f0d-688e0733cc6a\",\"embeddableConfig\":{\"enhancements\":{}},\"panelRefName\":\"panel_8ef25a95-fcfe-46d6-8f0d-688e0733cc6a\"},{\"version\":\"8.1.3\",\"type\":\"search\",\"gridData\":{\"x\":0,\"y\":15,\"w\":24,\"h\":15,\"i\":\"40e5fe48-56d0-4293-8fc3-8567acd644b1\"},\"panelIndex\":\"40e5fe48-56d0-4293-8fc3-8567acd644b1\",\"embeddableConfig\":{\"enhancements\":{}},\"panelRefName\":\"panel_40e5fe48-56d0-4293-8fc3-8567acd644b1\"},{\"version\":\"8.1.3\",\"type\":\"search\",\"gridData\":{\"x\":24,\"y\":15,\"w\":24,\"h\":15,\"i\":\"76527d2d-1196-4826-8c0c-b93ded5e6a00\"},\"panelIndex\":\"76527d2d-1196-4826-8c0c-b93ded5e6a00\",\"embeddableConfig\":{\"enhancements\":{}},\"panelRefName\":\"panel_76527d2d-1196-4826-8c0c-b93ded5e6a00\"}]","timeRestore":false,"title":"Senzing Dashboard","version":1},"coreMigrationVersion":"8.1.3","id":"98d20a20-e109-11ec-abf1-5991269c961f","migrationVersion":{"dashboard":"8.1.0"},"references":[{"id":"00d7a310-e109-11ec-abf1-5991269c961f","name":"0724e8d3-62d3-498b-aae4-25dbcb6a0d3c:panel_0724e8d3-62d3-498b-aae4-25dbcb6a0d3c","type":"search"},{"id":"6e2f1f60-e109-11ec-abf1-5991269c961f","name":"8ef25a95-fcfe-46d6-8f0d-688e0733cc6a:panel_8ef25a95-fcfe-46d6-8f0d-688e0733cc6a","type":"search"},{"id":"d28a14f0-e10a-11ec-abf1-5991269c961f","name":"40e5fe48-56d0-4293-8fc3-8567acd644b1:panel_40e5fe48-56d0-4293-8fc3-8567acd644b1","type":"search"},{"id":"e0977e70-e10a-11ec-abf1-5991269c961f","name":"76527d2d-1196-4826-8c0c-b93ded5e6a00:panel_76527d2d-1196-4826-8c0c-b93ded5e6a00","type":"search"}],"type":"dashboard","updated_at":"2022-06-02T15:01:40.717Z","version":"WzY0NCwxXQ=="}
        {"excludedObjects":[],"excludedObjectsCount":0,"exportedCount":6,"missingRefCount":0,"missingReferences":[]}
    image: curlimages/curl:latest
    read_only: false
    user: ${SENZING_UID:-1001}:${SENZING_GID:-1001}

  elasticsearch:
    container_name: senzing-elasticsearch
    environment:
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      xpack.security.enabled: 'false'
    image: elasticsearch:${SENZING_DOCKER_IMAGE_VERSION_ELASTICSEARCH:-8.1.3}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-elasticsearch"
    networks:
      - senzing
    ports:
      - 9200:9200
      - 9300:9300
    user: "${SENZING_UID:-1001}:0"
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data:z

  logstash:
    command:
      - --config.string
      - >-
        input {
          gelf {
            port => 12201
          }
        }
        output {
          elasticsearch {
            hosts => ["http://elasticsearch:9200"]
            index => "logstash-%{+YYYY-MM-dd}"
          }
        }
    container_name: senzing-logstash
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    image: logstash:${SENZING_DOCKER_IMAGE_VERSION_LOGSTASH:-8.1.3}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-logstash"
    networks:
      - senzing
    ports:
      - 9600:9600
      - 12201:12201/udp
    restart: always
    user: ${SENZING_UID:-1001}:${SENZING_GID:-1001}

  kibana:
    container_name: senzing-kibana
    depends_on:
      - elasticsearch
      - logstash
    image: kibana:${SENZING_DOCKER_IMAGE_VERSION_KIBANA:-8.1.3}
    networks:
      - senzing
    ports:
      - 5601:5601
    user: ${SENZING_UID:-1001}:${SENZING_GID:-1001}

  rabbitmq:
    container_name: senzing-rabbitmq
    depends_on:
      - logstash
    environment:
#     See https://github.com/bitnami/bitnami-docker-rabbitmq#configuration
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-bitnami}
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME:-user}
    image: bitnami/rabbitmq:${SENZING_DOCKER_IMAGE_VERSION_BITNAMI_RABBITMQ:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-rabbitmq"
    networks:
      - senzing
    ports:
      - 15672:15672
      - 5672:5672
    restart: always
    volumes:
      - ${RABBITMQ_DIR:-/var/rabbitmq}:/bitnami

  producer:
    container_name: senzing-stream-producer
    depends_on:
      - rabbitmq
      - logstash
    environment:
#     See https://github.com/Senzing/stream-producer#configuration
      SENZING_DELAY_IN_SECONDS: 30
      SENZING_INPUT_URL: ${SENZING_INPUT_URL:-https://s3.amazonaws.com/public-read-access/TestDataSets/loadtest-dataset-1M.json}
      SENZING_RABBITMQ_EXCHANGE: senzing-rabbitmq-exchange
      SENZING_RABBITMQ_HOST: senzing-rabbitmq
      SENZING_RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-bitnami}
      SENZING_RABBITMQ_QUEUE: senzing-rabbitmq-queue
      SENZING_RABBITMQ_ROUTING_KEY: senzing.records
      SENZING_RABBITMQ_USERNAME: ${RABBITMQ_USERNAME:-user}
      SENZING_RECORD_MAX: ${SENZING_RECORD_MAX:-5000}
      SENZING_RECORD_MONITOR: 1000
      SENZING_SUBCOMMAND: json-to-rabbitmq
    image: senzing/stream-producer:${SENZING_DOCKER_IMAGE_VERSION_STREAM_PRODUCER:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-producer"
    networks:
      - senzing
    read_only: true
    restart: on-failure
    user: ${SENZING_UID:-1001}:${SENZING_GID:-1001}
    volumes:
      - ${SENZING_VAR_DIR:-/var/opt/senzing}:/var/opt/senzing

  postgres:
    container_name: senzing-postgres
    depends_on:
      - logstash
    environment:
#     See https://github.com/bitnami/bitnami-docker-postgresql#configuration
      POSTGRESQL_DATABASE: ${POSTGRES_DB:-G2}
      POSTGRESQL_PASSWORD: ${POSTGRES_PASSWORD:-senzing}
      POSTGRESQL_POSTGRES_PASSWORD: ${POSTGRESQL_POSTGRES_PASSWORD:-postgres}
      POSTGRESQL_USERNAME: ${POSTGRES_USERNAME:-senzing}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USERNAME:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    image: bitnami/postgresql:${SENZING_DOCKER_IMAGE_VERSION_BITNAMI_POSTGRESQL:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-postgres"
    networks:
      - senzing
    ports:
      - 5432:5432
    restart: always
    user: "${SENZING_UID:-1001}:0"
    volumes:
      - ${POSTGRES_DIR:-/var/lib/postgresql/data}:/bitnami/postgresql

  postgresinit:
    container_name: senzing-postgresql-init
    depends_on:
      - postgres
      - logstash
    environment:
      SENZING_DATABASE_URL: "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-senzing-postgres}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-G2}"
      SENZING_SQL_FILE: /opt/senzing/g2/resources/schema/g2core-schema-postgresql-create.sql
    image: senzing/postgresql-client:${SENZING_DOCKER_IMAGE_VERSION_POSTGRESQL_CLIENT:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-postgresinit"
    networks:
      - senzing
    read_only: true
    restart: on-failure
    user: ${SENZING_UID:-1001}:${SENZING_GID:-1001}
    volumes:
      - ${SENZING_G2_DIR:-/opt/senzing/g2}:/opt/senzing/g2

  pgadmin:
    container_name: senzing-pgadmin
    depends_on:
      - logstash
      - makefile
    environment:
#    See https://www.pgadmin.org/docs/pgadmin4/latest/container_deployment.html
     PGADMIN_CONFIG_DEFAULT_SERVER: '"0.0.0.0"'
     PGADMIN_CONFIG_LOGIN_BANNER: |-
       "<h4>Senzing demonstration</h4>
       Although pgAdmin can be configured for security,
       <br/>the following credentials are used for demonstration.
       <ul>
         <li><b>Username:</b> postgres@postgres.com</li>
         <li><b>Password:</b> password</li>
       </ul>"
     PGADMIN_DEFAULT_EMAIL: postgres@postgres.com
     PGADMIN_DEFAULT_PASSWORD: password
     PGADMIN_SERVER_JSON_FILE: /var/lib/pgadmin/storage/servers.json
    image: dpage/pgadmin4:${SENZING_DOCKER_IMAGE_VERSION_DPAGE_PGADMIN4:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-pgadmin"
    networks:
      - senzing
    ports:
      - 9171:80
      - 9172:443
    restart: always
    user: "${SENZING_UID:-1001}:0"
    volumes:
      - ${PGADMIN_DIR:-/var/lib/pgadmin/storage}:/var/lib/pgadmin/storage

  initcontainer:
    container_name: senzing-init-container
    depends_on:
      - postgres
      - postgresinit
      - logstash
    environment:
#     See https://github.com/Senzing/docker-init-container#configuration
      SENZING_DATABASE_URL: "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-senzing-postgres}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-G2}"
      SENZING_DELAY_IN_SECONDS: 30
      SENZING_GID: ${SENZING_GID:-1001}
      SENZING_UID: ${SENZING_UID:-1001}
    image: senzing/init-container:${SENZING_DOCKER_IMAGE_VERSION_INIT_CONTAINER:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-initcontainer"
    networks:
      - senzing
    read_only: true
    restart: on-failure
    user: "0"
    volumes:
      - ${SENZING_DATA_VERSION_DIR:-/opt/senzing/data/3.0.0}:/opt/senzing/data
      - ${SENZING_ETC_DIR:-/etc/opt/senzing}:/etc/opt/senzing
      - ${SENZING_G2_DIR:-/opt/senzing/g2}:/opt/senzing/g2
      - ${SENZING_VAR_DIR:-/var/opt/senzing}:/var/opt/senzing

  console:
    cap_add:
      - ALL
    container_name: senzing-console
    depends_on:
      - logstash
    environment:
      SENZING_ENGINE_CONFIGURATION_JSON: >-
        {
          "PIPELINE": {
            "CONFIGPATH": "/etc/opt/senzing",
            "RESOURCEPATH": "/opt/senzing/g2/resources",
            "SUPPORTPATH": "/opt/senzing/data"
          },
          "SQL": {
            "CONNECTION": "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-senzing-postgres}:${POSTGRES_PORT:-5432}:${POSTGRES_DB:-G2}/"
          }
        }
    image: senzing/senzing-console:${SENZING_DOCKER_IMAGE_VERSION_SENZING_CONSOLE:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-console"
    networks:
      - senzing
    restart: always
    user: ${SENZING_UID:-1001}:${SENZING_GID:-1001}
    volumes:
      - ${SENZING_DATA_VERSION_DIR:-/opt/senzing/data/3.0.0}:/opt/senzing/data
      - ${SENZING_ETC_DIR:-/etc/opt/senzing}:/etc/opt/senzing
      - ${SENZING_G2_DIR:-/opt/senzing/g2}:/opt/senzing/g2
      - ${SENZING_VAR_DIR:-/var/opt/senzing}:/var/opt/senzing

  loader:
    container_name: senzing-stream-loader
    depends_on:
      - rabbitmq
      - postgres
      - logstash
    environment:
      LC_CTYPE: en_US.utf8
#     See https://github.com/Senzing/stream-loader#configuration
      SENZING_DATABASE_URL: "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-senzing-postgres}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-G2}"
      SENZING_DATA_SOURCE: ${SENZING_DATA_SOURCE:-TEST}
      SENZING_DELAY_IN_SECONDS: 60
      SENZING_ENGINE_CONFIGURATION_JSON: >-
        {
          "PIPELINE": {
            "CONFIGPATH": "/etc/opt/senzing",
            "RESOURCEPATH": "/opt/senzing/g2/resources",
            "SUPPORTPATH": "/opt/senzing/data"
          },
          "SQL": {
            "CONNECTION": "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-senzing-postgres}:${POSTGRES_PORT:-5432}:${POSTGRES_DB:-G2}/"
          }
        }
      SENZING_ENTITY_TYPE: ${SENZING_ENTITY_TYPE:-GENERIC}
      SENZING_MONITORING_PERIOD_IN_SECONDS: ${SENZING_MONITORING_PERIOD_IN_SECONDS:-60}
      SENZING_RABBITMQ_HOST: senzing-rabbitmq
      SENZING_RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-bitnami}
      SENZING_RABBITMQ_QUEUE: senzing-rabbitmq-queue
      SENZING_RABBITMQ_USERNAME: ${RABBITMQ_USERNAME:-user}
      SENZING_RABBITMQ_USE_EXISTING_ENTITIES: "False"
      SENZING_SUBCOMMAND: rabbitmq
    image: senzing/stream-loader:${SENZING_DOCKER_IMAGE_VERSION_STREAM_LOADER:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-loader"
    networks:
      - senzing
    read_only: true
    restart: always
    user: ${SENZING_UID:-1001}:${SENZING_GID:-1001}
    volumes:
      - ${SENZING_DATA_VERSION_DIR:-/opt/senzing/data/3.0.0}:/opt/senzing/data
      - ${SENZING_ETC_DIR:-/etc/opt/senzing}:/etc/opt/senzing
      - ${SENZING_G2_DIR:-/opt/senzing/g2}:/opt/senzing/g2

  redoer:
    container_name: senzing-redoer
    depends_on:
      - loader
      - logstash
    environment:
#     See https://github.com/Senzing/redoer#configuration
      SENZING_DATABASE_URL: "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-senzing-postgres}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-G2}"
      SENZING_DELAY_IN_SECONDS: 60
      SENZING_ENGINE_CONFIGURATION_JSON: >-
        {
          "PIPELINE": {
            "CONFIGPATH": "/etc/opt/senzing",
            "RESOURCEPATH": "/opt/senzing/g2/resources",
            "SUPPORTPATH": "/opt/senzing/data"
          },
          "SQL": {
            "CONNECTION": "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-senzing-postgres}:${POSTGRES_PORT:-5432}:${POSTGRES_DB:-G2}/"
          }
        }
      SENZING_EXIT_ON_THREAD_TERMINATION: ${SENZING_EXIT_ON_THREAD_TERMINATION:-"false"}
      SENZING_MONITORING_PERIOD_IN_SECONDS: ${SENZING_MONITORING_PERIOD_IN_SECONDS:-60}
      SENZING_SUBCOMMAND: redo
    image: senzing/redoer:${SENZING_DOCKER_IMAGE_VERSION_REDOER:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-redoer"
    networks:
      - senzing
    privileged: true
    read_only: true
    restart: on-failure
    user: ${SENZING_UID:-1001}:${SENZING_GID:-1001}
    volumes:
      - ${SENZING_DATA_VERSION_DIR:-/opt/senzing/data/3.0.0}:/opt/senzing/data
      - ${SENZING_ETC_DIR:-/etc/opt/senzing}:/etc/opt/senzing
      - ${SENZING_G2_DIR:-/opt/senzing/g2}:/opt/senzing/g2

  pocserver:
    container_name: senzing-poc-server
    depends_on:
      - postgres
      - logstash
    environment:
      SENZING_API_SERVER_ALLOWED_ORIGINS: '*'
      SENZING_API_SERVER_BIND_ADDR: 'all'
      SENZING_API_SERVER_ENABLE_ADMIN: 'true'
      SENZING_API_SERVER_INIT_JSON: >-
        {
          "PIPELINE": {
            "CONFIGPATH": "/etc/opt/senzing",
            "RESOURCEPATH": "/opt/senzing/g2/resources",
            "SUPPORTPATH": "/opt/senzing/data"
          },
          "SQL": {
            "CONNECTION": "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-senzing-postgres}:${POSTGRES_PORT:-5432}:${POSTGRES_DB:-G2}/"
          }
        }
      SENZING_API_SERVER_PORT: '8250'
      SENZING_API_SERVER_SKIP_ENGINE_PRIMING: 'true'
      SENZING_API_SERVER_SKIP_STARTUP_PERF: 'true'
      SENZING_ENGINE_CONFIGURATION_JSON: >-
        {
          "PIPELINE": {
            "CONFIGPATH": "/etc/opt/senzing",
            "RESOURCEPATH": "/opt/senzing/g2/resources",
            "SUPPORTPATH": "/opt/senzing/data"
          },
          "SQL": {
            "CONNECTION": "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-senzing-postgres}:${POSTGRES_PORT:-5432}:${POSTGRES_DB:-G2}/"
          }
        }
      SENZING_RABBITMQ_LOAD_EXCHANGE: senzing-rabbitmq-exchange
      SENZING_RABBITMQ_LOAD_HOST: senzing-rabbitmq
      SENZING_RABBITMQ_LOAD_PASSWORD: ${RABBITMQ_PASSWORD:-bitnami}
      SENZING_RABBITMQ_LOAD_PORT: 5672
      SENZING_RABBITMQ_LOAD_ROUTING_KEY: senzing.records
      SENZING_RABBITMQ_LOAD_USERNAME: ${RABBITMQ_USERNAME:-user}
      SENZING_RABBITMQ_LOAD_VIRTUAL_HOST: "/"
    image: senzing/senzing-poc-server:${SENZING_DOCKER_IMAGE_VERSION_SENZING_POC_SERVER:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-pocserver"
    networks:
      - senzing
    ports:
      - 8250:8250
    read_only: true
    restart: always
    tmpfs:
      - /tmp
    user: ${SENZING_UID:-1001}:${SENZING_GID:-1001}
    volumes:
      - ${SENZING_DATA_VERSION_DIR:-/opt/senzing/data/3.0.0}:/opt/senzing/data
      - ${SENZING_ETC_DIR:-/etc/opt/senzing}:/etc/opt/senzing
      - ${SENZING_G2_DIR:-/opt/senzing/g2}:/opt/senzing/g2

  webapp:
    container_name: senzing-webapp
    depends_on:
      - pocserver
      - logstash
      - webapp-console
    environment:
#     See https://github.com/Senzing/entity-search-web-app#configuration
      SENZING_API_SERVER_URL: http://senzing-poc-server:8250
      SENZING_WEB_SERVER_ADMIN_AUTH_MODE: NONE
      SENZING_WEB_SERVER_ADMIN_AUTH_PATH: http://senzing-webapp:8251
      SENZING_WEB_SERVER_INTERNAL_URL: http://senzing-webapp:8251
      SENZING_WEB_SERVER_PORT: 8251
      SENZING_WEB_SERVER_STREAM_CLIENT_URL: wss://senzing-poc-server:8250/ws
      SENZING_CONSOLE_SERVER_URL: ws://senzing-webapp-console:8257
    image: senzing/entity-search-web-app:${SENZING_DOCKER_IMAGE_VERSION_ENTITY_SEARCH_WEB_APP:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-webapp"
    networks:
      - senzing
    ports:
      - 8251:8251
      - 8257:8257
    read_only: true
    restart: always

  webapp-console:
    container_name: senzing-webapp-console
    environment:
      SENZING_CONSOLE_SERVER_PORT: 8257
    image: senzing/entity-search-web-app-console:${SENZING_DOCKER_IMAGE_VERSION_ENTITY_SEARCH_WEB_APP_CONSOLE:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-webapp-console"
    networks:
      - senzing
    restart: 'no'
    user: ${SENZING_UID:-1001}:${SENZING_GID:-1001}
    volumes:
      - ${SENZING_DATA_VERSION_DIR:-/opt/senzing/data/3.0.0}:/opt/senzing/data
      - ${SENZING_ETC_DIR:-/etc/opt/senzing}:/etc/opt/senzing
      - ${SENZING_G2_DIR:-/opt/senzing/g2}:/opt/senzing/g2
      - ${SENZING_VAR_DIR:-/var/opt/senzing}:/var/opt/senzing

  jupyter:
    container_name: senzing-jupyter
    command:
      - start.sh
      - jupyter
      - notebook
      - "--NotebookApp.token=''"
    depends_on:
      - loader
      - logstash
    environment:
#     See https://github.com/Senzing/docker-jupyter#configuration
      SENZING_ENGINE_CONFIGURATION_JSON: >-
        {
          "PIPELINE": {
            "CONFIGPATH": "/etc/opt/senzing",
            "RESOURCEPATH": "/opt/senzing/g2/resources",
            "SUPPORTPATH": "/opt/senzing/data"
          },
          "SQL": {
            "CONNECTION": "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-senzing-postgres}:${POSTGRES_PORT:-5432}:${POSTGRES_DB:-G2}/"
          }
        }
      SENZING_SQL_CONNECTION: "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@senzing-postgres:5432:${POSTGRES_DB:-G2}/"
    image: senzing/jupyter:${SENZING_DOCKER_IMAGE_VERSION_JUPYTER:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-jupyter"
    networks:
      - senzing
    ports:
      - 9178:8888
    restart: always
    volumes:
      - ${JUPYTER_NOTEBOOKS_SHARED_DIR:-~}:/notebooks/shared
      - ${SENZING_DATA_VERSION_DIR:-/opt/senzing/data/3.0.0}:/opt/senzing/data
      - ${SENZING_ETC_DIR:-/etc/opt/senzing}:/etc/opt/senzing
      - ${SENZING_G2_DIR:-/opt/senzing/g2}:/opt/senzing/g2

  sshd:
    cap_add:
      - ALL
    container_name: senzing-sshd
    depends_on:
      - logstash
    environment:
      ROOT_PASSWORD: ${SENZING_SSHD_PASSWORD:-senzingsshdpassword}
      SENZING_ENGINE_CONFIGURATION_JSON: >-
        {
          "PIPELINE": {
            "CONFIGPATH": "/etc/opt/senzing",
            "RESOURCEPATH": "/opt/senzing/g2/resources",
            "SUPPORTPATH": "/opt/senzing/data"
          },
          "SQL": {
            "CONNECTION": "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-senzing-postgres}:${POSTGRES_PORT:-5432}:${POSTGRES_DB:-G2}/"
          }
        }
    image: senzing/sshd:${SENZING_DOCKER_IMAGE_VERSION_SSHD:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-sshd"
    networks:
      - senzing
    ports:
      - "${SENZING_SSHD_PORT:-9181}:22"
    restart: always
    volumes:
      - ${SENZING_DATA_VERSION_DIR:-/opt/senzing/data/3.0.0}:/opt/senzing/data
      - ${SENZING_ETC_DIR:-/etc/opt/senzing}:/etc/opt/senzing
      - ${SENZING_G2_DIR:-/opt/senzing/g2}:/opt/senzing/g2
      - ${SENZING_VAR_DIR:-/var/opt/senzing}:/var/opt/senzing

  xterm:
    container_name: senzing-xterm
    depends_on:
      - logstash
    environment:
      SENZING_ENGINE_CONFIGURATION_JSON: >-
        {
          "PIPELINE": {
            "CONFIGPATH": "/etc/opt/senzing",
            "RESOURCEPATH": "/opt/senzing/g2/resources",
            "SUPPORTPATH": "/opt/senzing/data"
          },
          "SQL": {
            "CONNECTION": "postgresql://${POSTGRES_USERNAME:-postgres}:${POSTGRES_PASSWORD:-postgres}@${POSTGRES_HOST:-senzing-postgres}:${POSTGRES_PORT:-5432}:${POSTGRES_DB:-G2}/"
          }
        }
    image: senzing/xterm:${SENZING_DOCKER_IMAGE_VERSION_XTERM:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-xterm"
    networks:
      - senzing
    ports:
      - 8254:5000
    restart: always
    user: ${SENZING_UID:-1001}:${SENZING_GID:-1001}
    volumes:
      - ${SENZING_DATA_VERSION_DIR:-/opt/senzing/data/3.0.0}:/opt/senzing/data
      - ${SENZING_ETC_DIR:-/etc/opt/senzing}:/etc/opt/senzing
      - ${SENZING_G2_DIR:-/opt/senzing/g2}:/opt/senzing/g2
      - ${SENZING_VAR_DIR:-/var/opt/senzing}:/var/opt/senzing

  swaggerui:
    container_name: senzing-swaggerui
    depends_on:
      - logstash
    environment:
      URL: "https://raw.githubusercontent.com/Senzing/senzing-rest-api-specification/main/senzing-rest-api.yaml"
    image: swaggerapi/swagger-ui:${SENZING_DOCKER_IMAGE_VERSION_SWAGGERAPI_SWAGGER_UI:-latest}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "senzing-swaggerui"
    networks:
      - senzing
    ports:
      - 9180:8080
    restart: always

networks:
  senzing:
    name: ${SENZING_DOCKER_NETWORK:-senzing-network}

volumes:
  elasticsearch:
